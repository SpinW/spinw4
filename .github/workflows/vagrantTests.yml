# This is a basic workflow to help you get started with Actions

name: SpinW Tests

# Controls when the action will run. 
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master, development ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow creates a VM labeled `matlab_linux`
  create_runner:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Don't run if we ask to skip CI
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    # Steps represent a sequence of tasks that will be executed as part of the job
    strategy:
      matrix:
        os: [linux, windows]
    steps:
      # Creates the new VM
      - name: Install OpenSSL
        run: |
          sudo sudo apt-get install openssl
      - name: Encrypt PAT
        run: |
          # The encrypted token has a newline; use tr to replace it with underscore
          encrypted_pat=$(echo ${{ secrets.PERSONAL_TOKEN }} | \
                          openssl enc -e -aes-256-cbc -pbkdf2 -a -k ${{ secrets.OPENSSL_PW }} | \
                          tr "\n" "_")
          echo "ENCRYPTED_PAT=$encrypted_pat" >> $GITHUB_ENV
      - name: Invoke creation hook
        uses: distributhor/workflow-webhook@v1
        env:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
          webhook_auth: ${{ secrets.WEBHOOK_AUTH }}
          # decrypted on server with `openssl enc -aes-256-cbc -d -a -pbkdf2 -k $OPENSSL_PW`
          data: '{ "ghcontrol": "create", "server" : "${{ matrix.os }}", "PAT" : "${{ env.ENCRYPTED_PAT }}" }'
  
  # This workflow runs the actual unit tests if we have suceeded creating the VM
  unit_tests:
    needs: create_runner
    strategy:
      matrix:
        os: [linux_matlab, windows_matlab]
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs MATLAB tests
      - name: Run Matlab
        run: matlab -batch "run run_tests.m"
      # Upload the results
      - uses: codecov/codecov-action@v1
        with:
            files: coverage.xml
            token: ${{ secrets.CODECOV_TOKEN }}

  # This workflow always runs after the creating and unit tests, destroying the VM
  destroy_runner:
    needs: [create_runner, unit_tests]
    if: always()
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    strategy:
      matrix:
        os: [linux, windows]
    steps:
      # Destroy the VM
      - name: Invoke destroying hook
        uses: distributhor/workflow-webhook@v1
        env:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
          webhook_auth: ${{ secrets.WEBHOOK_AUTH }}
          data: '{ "ghcontrol": "destroy", "server" : "${{ matrix.os }}" }'
